// Mocks generated by Mockito 5.4.4 from annotations
// in flut_base_app_razzies/test/domain/usecases/get_movies/get_movies_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flut_base_app_razzies/app/data/datasources/get_movies/get_movies_datasource.dart'
    as _i3;
import 'package:flut_base_app_razzies/app/domain/models/dtos/movie/paginated_movies_dto.dart'
    as _i2;
import 'package:flut_base_app_razzies/app/domain/models/dtos/pagination/pagination_dto.dart'
    as _i6;
import 'package:flut_base_app_razzies/app/domain/usecases/get_movies/get_movies_usecase.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePaginatedMovies_0 extends _i1.SmartFake
    implements _i2.PaginatedMoviesDto {
  _FakePaginatedMovies_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetMoviesDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMoviesDatasource extends _i1.Mock
    implements _i3.GetMoviesDatasource {
  MockGetMoviesDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.PaginatedMoviesDto> call({String? query}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#query: query},
        ),
        returnValue:
            _i4.Future<_i2.PaginatedMoviesDto>.value(_FakePaginatedMovies_0(
          this,
          Invocation.method(
            #call,
            [],
            {#query: query},
          ),
        )),
      ) as _i4.Future<_i2.PaginatedMoviesDto>);
}

/// A class which mocks [GetMoviesUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMoviesUsecase extends _i1.Mock implements _i5.GetMoviesUsecase {
  MockGetMoviesUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.PaginatedMoviesDto> call({
    required _i6.PaginationDto? pagination,
    int? year,
    bool? winner,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #pagination: pagination,
            #year: year,
            #winner: winner,
          },
        ),
        returnValue:
            _i4.Future<_i2.PaginatedMoviesDto>.value(_FakePaginatedMovies_0(
          this,
          Invocation.method(
            #call,
            [],
            {
              #pagination: pagination,
              #year: year,
              #winner: winner,
            },
          ),
        )),
      ) as _i4.Future<_i2.PaginatedMoviesDto>);
}
